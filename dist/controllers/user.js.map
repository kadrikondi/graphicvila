{"version":3,"sources":["../../server/controllers/user.js"],"names":["UserService","require","bcrypt","cloudinary","UserController","req","res","getAllUsers","info","status","json","error","message","id","params","getSingleUser","graphics","body","email","password","loginUser","user","token","deleteUser","name","gender","data","hash","hashSync","registerUser","save","image","file","path","uploader","upload","result","imgUrl","secure_url","updateUser","module","exports"],"mappings":"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","file":"user.js","sourcesContent":["const UserService = require('../service/user')\r\nconst bcrypt = require('bcryptjs')\r\nconst cloudinary = require('cloudinary')\r\n\r\nclass UserController {\r\n\r\n    static async getAllusers(req, res) {\r\n        try {\r\n            const info = await UserService.getAllUsers()\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async getSingleUser(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await UserService.getSingleUser(id)\r\n            return res.status(200).json({\r\n                info: info[0],\r\n                graphics: info[1]\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async loginUser(req, res) {\r\n        try {\r\n            const { email, password } = req.body\r\n            if(!email || !password) {\r\n                return res.status(400).json({\r\n                    message: 'Please fill all fields'\r\n                })\r\n            }\r\n            else {\r\n                const user = await UserService.loginUser(email, password)\r\n                if(!user) {\r\n                    return res.status(404).json({\r\n                        message: 'wrong email/password'\r\n                    })\r\n                }\r\n                else {\r\n                    return res.status(200).json({\r\n                        message: 'login was successful',\r\n                        token: user[0],\r\n                        id: user[1]\r\n\r\n                    })\r\n                }\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async deletUser(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await UserService.deleteUser(id)\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async registerUser(req, res) {\r\n        try {\r\n            if(!req.body.name || !req.body.email || !req.body.password || !req.body.gender) {\r\n                return res.status(400).json({\r\n                    message: 'Please fill in all fields'\r\n                })\r\n            }\r\n            else {\r\n                const data = req.body\r\n                const hash = bcrypt.hashSync(req.body.password, 10)\r\n                const info = await UserService.registerUser(data)\r\n                info.password = hash\r\n                await info.save()\r\n                return res.status(201).json({ message:\"created\",\r\n                    info: info\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async updateUser(req, res) {\r\n        try {\r\n            var image = req.file.path\r\n            const result = await cloudinary.uploader.upload(image)\r\n            var imgUrl = result.secure_url\r\n            const { id } = req.params\r\n            const data = req.body\r\n            const info = await UserService.updateUser(id, data, imgUrl)\r\n            return res.status(200).json({\r\n                info: info,\r\n                message:'profile updated'\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = UserController;\r\n"]}