{"version":3,"sources":["../../server/controllers/user.js"],"names":["UserController","req","res","UserService","getAllUsers","info","status","json","error","message","id","params","getSingleUser","body","email","password","loginUser","user","deleteUser","name","address","occupation","phone","data","hash","bcrypt","hashSync","registerUser","save"],"mappings":"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","file":"user.js","sourcesContent":["import UserService from '../service/user'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nclass UserController {\r\n\r\n    static async getAllusers(req, res) {\r\n        try {\r\n            const info = await UserService.getAllUsers()\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async getSingleUser(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await UserService.getSingleUser(id)\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async loginUser(req, res) {\r\n        try {\r\n            const { email, password } = req.body\r\n            if(!email || !password) {\r\n                return res.status(400).json({\r\n                    message: 'Please fill all fields'\r\n                })\r\n            }\r\n            else {\r\n                const user = await UserService.loginUser(email, password)\r\n                if(!user) {\r\n                    return res.status(404).json({\r\n                        message: 'wrong email/password'\r\n                    })\r\n                }\r\n                else {\r\n                    return res.status(200).json({\r\n                        message: 'login was successful',\r\n                        user: user\r\n                    })\r\n                }\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async deletUser(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await UserService.deleteUser(id)\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async registerUser(req, res) {\r\n        try {\r\n            if(!req.body.name || !req.body.email || !req.body.password || !req.body.address || !req.body.occupation || !req.body.phone) {\r\n                return res.status(400).json({\r\n                    message: 'Please fill in all fields'\r\n                })\r\n            }\r\n            else {\r\n                const data = req.body\r\n                const hash = bcrypt.hashSync(req.body.password, 10)\r\n                const info = await UserService.registerUser(data)\r\n                info.password = hash\r\n                await info.save()\r\n                return res.status(201).json({\r\n                    info: info\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserController;\r\n"]}