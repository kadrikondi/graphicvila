{"version":3,"sources":["../../server/controllers/graphic.js"],"names":["GraphicService","require","cloudinary","GraphicController","req","res","getAllGraphics","info","length","status","json","error","message","body","name","ideaname","caption","file","undefined","image","path","uploader","upload","result","imgUrl","secure_url","id","params","data","userPostNewGraphics","getSingleGraphic","UserService","updateGraphic","_id","deleteGraphic","module","exports"],"mappings":"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","file":"graphic.js","sourcesContent":["const GraphicService = require('../service/graphics')\r\nconst cloudinary = require('cloudinary')\r\n\r\nclass GraphicController {\r\n    static async getAllGraphics(req, res) {\r\n        try {\r\n            const info = await GraphicService.getAllGraphics()\r\n            if(info.length > 0) {\r\n                return res.status(200).json({\r\n                    info: info\r\n                })\r\n            }\r\n            return null\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async userPostNewGraphics(req, res) {\r\n        try {\r\n            if(!req.body.name || !req.body.ideaname || !req.body.caption) {\r\n                return res.status(400).json({\r\n                    message: 'Please fill in all fiels'\r\n                })\r\n            }\r\n            else if(req.file == undefined || req.file == ''){\r\n                return res.status(400).json({message:`Error: No file selected`})\r\n            }\r\n            else {\r\n                var image = req.file.path\r\n                const result = await cloudinary.uploader.upload(image)\r\n                var imgUrl = result.secure_url\r\n                const { id } = req.params\r\n                const data = req.body\r\n                const info = await GraphicService.userPostNewGraphics(id, data, imgUrl)\r\n                return res.status(200).json({\r\n                    info: info,\r\n                    message: 'Post uploaded successfully'\r\n                })\r\n            }\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async getSingleGraphic(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const info = await GraphicService.getSingleGraphic(id)\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async updateGraphic(req, res) {\r\n        try {\r\n            const { id } = req.params\r\n            const data = req.body\r\n            const info = await UserService.updateGraphic(id, data)\r\n            return res.status(200).json({\r\n                info: info\r\n            })\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    static async deleteGraphic(req, res) {\r\n        try {\r\n            const { _id } = req.params\r\n            const info = await UserService.deleteGraphic(_id)\r\n        } catch (e) {\r\n            return res.status(500).json({\r\n                error: e.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = GraphicController\r\n"]}
