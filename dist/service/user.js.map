{"version":3,"sources":["../../server/service/user.js"],"names":["UserService","User","find","sort","info","length","data","create","email","password","findOne","user","passwordisValid","bcrypt","compareSync","jwt","sign","_id","id","name","config","UserSecret","token","findOneAndDelete"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,W;;;;;;;;;;;;;;;;uCAIyBC,eAAKC,IAAL,GAAYC,IAAZ,CAAiB,EAAC,OAAO,CAAC,CAAT,EAAjB,C;;;AAAbC,oC;;sCACHA,KAAKC,MAAL,GAAc,C;;;;;iEACND,I;;;iEAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;kGAMWE,I;;;;;;;uCAELL,eAAKM,MAAL,CAAYD,IAAZ,C;;;;;;;;;;;;;;;;;;;;;;;;;;;kGAMEE,K,EAAOC,Q;;;;;;;;uCAEHR,eAAKS,OAAL,CAAa,EAACF,OAAOA,KAAR,EAAb,C;;;AAAbG,oC;;oCACFA,I;;;;;kEACO,I;;;AAGDC,+C,GAAkBC,mBAAOC,WAAP,CAAmBH,KAAKF,QAAxB,EAAkCA,QAAlC,C;;oCACpBG,e;;;;;kEACO,I;;;;uCAGaG,uBAAIC,IAAJ,CAAS,EAACC,KAAKN,KAAKO,EAAX,EAAeC,MAAMR,KAAKQ,IAA1B,EAAT,EAA0CC,iBAAOC,UAAjD,C;;;AAAdC,qC;kEACCA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGAQIJ,E;;;;;;;;uCAEAjB,eAAKS,OAAL,CAAa,EAACO,KAAKC,EAAN,EAAb,C;;;AAAbd,oC;;qCACHA,I;;;;;kEACQA,I;;;kEAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;kGAMSc,E;;;;;;;;uCAEGjB,eAAKsB,gBAAL,CAAsB,EAACN,KAAKC,EAAN,EAAtB,C;;;AAAbd,oC;;qCACHA,I;;;;;kEACQA,I;;;kEAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;kGAMSc,E;;;;;;;;uCAEGjB,eAAKS,OAAL,CAAa,EAACO,KAAKC,EAAN,EAAb,C;;;AAAbd,oC;;qCACHA,I;;;;;kEACQA,I;;;kEAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;kBAOJJ,W","file":"user.js","sourcesContent":["import User from '../models/user'\r\nimport bcrypt from 'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\n\r\nclass UserService {\r\n\r\n    static async getAllUsers() {\r\n        try {\r\n            const info = await User.find().sort({\"_id\": -1})\r\n            if(info.length > 0) {\r\n                return info\r\n            }\r\n            return null\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    static async registerUser(data) {\r\n        try {\r\n            return await User.create(data)\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    static async loginUser(email, password) {\r\n        try {\r\n            const user = await User.findOne({email: email })\r\n            if(!user) {\r\n                return null\r\n            }\r\n            else {\r\n                const passwordisValid = bcrypt.compareSync(user.password, password)\r\n                if(!passwordisValid) {\r\n                    return null\r\n                }\r\n                else {\r\n                    const token = await jwt.sign({_id: user.id, name: user.name}, config.UserSecret)\r\n                    return token\r\n                }\r\n            }\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    static async getSingleUser(id) {\r\n        try {\r\n            const info = await User.findOne({_id: id })\r\n            if(info) {\r\n                return info\r\n            }\r\n            return null\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    static async deleteUser(id) {\r\n        try {\r\n            const info = await User.findOneAndDelete({_id: id })\r\n            if(info) {\r\n                return info\r\n            }\r\n            return null\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    static async updateUser(id) {\r\n        try {\r\n            const info = await User.findOne({_id: id })\r\n            if(info) {\r\n                return info\r\n            }\r\n            return null\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserService;\r\n"]}